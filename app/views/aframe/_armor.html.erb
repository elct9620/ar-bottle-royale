<script>
  AFRAME.registerComponent('armor', {
    schema: {
      src: { type: 'model' }
    },
    init() {
      this.model = null
      this.loader = new THREE.GLTFLoader();
      this.headPromise = new Promise((resolve) => {
        this.el.addEventListener('model-loaded', () => {
          // Grab the mesh / scene.
          const obj = this.el.getObject3D('mesh');
          this.head = obj.getObjectByName('head')
          resolve(this.head)
        });
      })
    },
    update() {
      var self = this;
      var el = this.el;
      var src = this.data.src;

      if (!src) {
        this.remove()
        return;
      }

      this.remove();

      this.loader.load(src, function gltfLoaded (gltfModel) {
        self.model = gltfModel.scene || gltfModel.scenes[0];
        self.model.animations = gltfModel.animations;
        self.headPromise.then(head => {
          self.model.scale.set(0.5, 0.5, 0.5)
          head.add(self.model)
        })
        el.emit('armor-loaded', { format: 'gltf', model: self.model });
      }, undefined /* onProgress */, function gltfFailed (error) {
        var message = (error && error.message) ? error.message : 'Failed to load glTF model';
        console.error(message)
        el.emit('model-error', {format: 'gltf', src: src});
      });
    },
    remove: function () {
      if (!this.model) { return; }
      this.headPromise.then(head => head.remove(this.model))
    }
  })
</script>
