<script>
  AFRAME.registerComponent('weapon', {
    schema: {
      src: { type: 'model' }
    },
    init() {
      this.model = null
      this.loader = new THREE.GLTFLoader();
      this.rightHandPromise = new Promise((resolve) => {
        this.el.addEventListener('model-loaded', () => {
          // Grab the mesh / scene.
          const obj = this.el.getObject3D('mesh');
          this.rightHand = obj.getObjectByName('handR_end')
          resolve(this.rightHand)
        });
      })
    },
    update() {
      var self = this;
      var el = this.el;
      var src = this.data.src;

      if (!src) { return; }

      this.remove();

      this.loader.load(src, function gltfLoaded (gltfModel) {
        self.model = gltfModel.scene || gltfModel.scenes[0];
        self.model.animations = gltfModel.animations;
        // el.setObject3D('weapon', self.model);
        self.rightHandPromise.then(rightHand => {
          self.model.scale.set(0.5, 0.5, 0.5)
          rightHand.add(self.model)
        })
        el.emit('weapon-loaded', { format: 'gltf', model: self.model });
      }, undefined /* onProgress */, function gltfFailed (error) {
        var message = (error && error.message) ? error.message : 'Failed to load glTF model';
        console.error(message)
        el.emit('model-error', {format: 'gltf', src: src});
      });
    },
    remove: function () {
      if (!this.model) { return; }
      this.rightHandPromise.then(rightHand => rightHand.remove(this.model))
    }
  })
</script>
